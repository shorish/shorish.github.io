<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shorish&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.wangyuehan.net/"/>
  <updated>2020-02-03T14:16:23.000Z</updated>
  <id>https://blog.wangyuehan.net/</id>
  
  <author>
    <name>Wang Jing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>非常时期，在家充电的免费资源</title>
    <link href="https://blog.wangyuehan.net/2020/02/03/free-read/"/>
    <id>https://blog.wangyuehan.net/2020/02/03/free-read/</id>
    <published>2020-02-03T05:02:44.000Z</published>
    <updated>2020-02-03T14:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="喜马拉雅APP：免费领取29天VIP会员"><a href="#喜马拉雅APP：免费领取29天VIP会员" class="headerlink" title="喜马拉雅APP：免费领取29天VIP会员"></a>喜马拉雅APP：免费领取29天VIP会员</h3><p>如何获取：下面链接中输入手机号，接收验证码领取，下载喜马拉雅APP使用</p><ul><li><a href="http://m.ximalaya.com/marketing/activity2/4993" target="_blank" rel="noopener">领取14天链接</a></li><li><a href="http://m.ximalaya.com/marketing/activity2/4996" target="_blank" rel="noopener">领取15天链接</a></li></ul><h3 id="得到APP：免费听书两个月VIP"><a href="#得到APP：免费听书两个月VIP" class="headerlink" title="得到APP：免费听书两个月VIP"></a>得到APP：免费听书两个月VIP</h3><p>如何获取：打开得到APP——我的——卡券——兑换卡券——输入“平平安安”</p><h3 id="电子图书免费读（电脑在线阅读）"><a href="#电子图书免费读（电脑在线阅读）" class="headerlink" title="电子图书免费读（电脑在线阅读）"></a>电子图书免费读（电脑在线阅读）</h3><ul><li><a href="http://ebooks.cmanuf.com/" target="_blank" rel="noopener">机械工业出版社</a></li><li><a href="https://lib-nuanxin.wqxuetang.com/" target="_blank" rel="noopener">清华大学出版社</a>，2月16日前    </li><li><a href="https://open.bfsu.edu.cn/" target="_blank" rel="noopener">北京外国语大学外语在线学习平台</a></li><li><a href="http://www.cnbksy.com/home" target="_blank" rel="noopener">全国报刊索引</a>，2月29日前，免费注册后，每个帐号每天可下载全文内容100次，50幅图片（图片库）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;喜马拉雅APP：免费领取29天VIP会员&quot;&gt;&lt;a href=&quot;#喜马拉雅APP：免费领取29天VIP会员&quot; class=&quot;headerlink&quot; title=&quot;喜马拉雅APP：免费领取29天VIP会员&quot;&gt;&lt;/a&gt;喜马拉雅APP：免费领取29天VIP会员&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="清单" scheme="https://blog.wangyuehan.net/categories/%E6%B8%85%E5%8D%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Odoo一个简单的Client Action示例</title>
    <link href="https://blog.wangyuehan.net/2019/07/31/odoo-create-client-action/"/>
    <id>https://blog.wangyuehan.net/2019/07/31/odoo-create-client-action/</id>
    <published>2019-07-31T06:53:24.000Z</published>
    <updated>2019-07-31T07:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>这个示例将创建一个菜单，点击触发一个客户端动作，关联js定义的对象，显示相应模板</p><p>这个示例包括下面三个文件<br><img src="http://image.wangyuehan.net/note/20190731/AM6JzbCls3R9.png?imageslim" alt="mark"></p><ul><li>模板文件<code>static/src/xml/client_action.xml</code><ul><li>定义模板<code>HelloJS</code>显示<code>&lt;div&gt;Display HelloJS&lt;/div&gt;</code></li></ul></li><li>JS文件<code>static/src/js/client_action.js</code><ul><li>定义对象<code>HomePage</code>继承于<code>web.AbstractAction</code></li><li>对象中调用<code>HelloJS</code>模板</li><li>对象中定义<code>init</code>方法和<code>start</code>方法</li><li>将<code>HomePage</code>对象注册为动作：<code>HelloJS_tag</code></li></ul></li><li>视图文件<code>views/client_action.xml</code><ul><li>继承<code>web.assets_backend</code>加载JS文件</li><li>定义客户端动作关联<code>HelloJS_tag</code></li><li>定义显示的菜单关联客户端动作</li></ul></li></ul><h3 id="示例文件内容"><a href="#示例文件内容" class="headerlink" title="示例文件内容"></a>示例文件内容</h3><p><strong>1、定义模板文件<code>static/src/xml/client_action.xml</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;  encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;templates xml:space=&quot;preserve&quot;&gt;</span><br><span class="line">   &lt;t t-name=&quot;HelloJS&quot;&gt;</span><br><span class="line">      &lt;div&gt;Display HelloJS&lt;/div&gt;</span><br><span class="line">   &lt;/t&gt;</span><br><span class="line">&lt;/templates&gt;</span><br></pre></td></tr></table></figure><p><strong>2、定义JS文件<code>static/src/js/client_action.js</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">odoo.define(&apos;hello.js&apos;, function (require) &#123;</span><br><span class="line">    &quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">    var Widget = require(&apos;web.Widget&apos;);</span><br><span class="line">    var core = require(&apos;web.core&apos;);</span><br><span class="line">    var utils = require(&apos;web.utils&apos;);</span><br><span class="line">    var AbstractAction = require(&apos;web.AbstractAction&apos;);</span><br><span class="line"></span><br><span class="line">    var HomePage = AbstractAction.extend(&#123;</span><br><span class="line">        template: &quot;HelloJS&quot;,</span><br><span class="line"></span><br><span class="line">        init: function (parent) &#123;</span><br><span class="line">            this._super(parent);</span><br><span class="line">            console.log(&quot;Hello JS, I&apos;m inside of init.&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        start: function () &#123;</span><br><span class="line">            console.log(&quot;Hello JS, I&apos;m inside of start.&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    core.action_registry.add(&apos;HelloJS_tag&apos;, HomePage);</span><br><span class="line"></span><br><span class="line">    return HomePage;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>3、创建视图文件<code>views/client_action.xml</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;odoo&gt;</span><br><span class="line">    &lt;data&gt;</span><br><span class="line"></span><br><span class="line">        &lt;template id=&quot;assets_backend&quot; name=&quot;petstore&quot;</span><br><span class="line">                  inherit_id=&quot;web.assets_backend&quot;&gt;</span><br><span class="line">            &lt;xpath expr=&quot;.&quot; position=&quot;inside&quot;&gt;</span><br><span class="line">                &lt;script type=&quot;text/javascript&quot;</span><br><span class="line">                        src=&quot;demo_client_action/static/src/js/client_action.js&quot;&gt;</span><br><span class="line">                &lt;/script&gt;</span><br><span class="line">            &lt;/xpath&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;record id=&quot;hellojs_id&quot; model=&quot;ir.actions.client&quot;&gt;</span><br><span class="line">            &lt;field name=&quot;name&quot;&gt;HelloJS&lt;/field&gt;</span><br><span class="line">            &lt;field name=&quot;tag&quot;&gt;HelloJS_tag&lt;/field&gt;</span><br><span class="line">        &lt;/record&gt;</span><br><span class="line"></span><br><span class="line">        &lt;menuitem id=&quot;hellojs_menu&quot;</span><br><span class="line">                  name=&quot;HelloJS&quot;</span><br><span class="line">                  action=&quot;hellojs_id&quot;/&gt;</span><br><span class="line">    &lt;/data&gt;</span><br><span class="line">&lt;/odoo&gt;</span><br></pre></td></tr></table></figure><p><strong>4、在<code>__manifest__.py</code>文件中引入XML文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;qweb&apos;: [</span><br><span class="line">    &apos;static/src/xml/client_action_template.xml&apos;</span><br><span class="line">],</span><br><span class="line">&apos;data&apos;: [</span><br><span class="line">    &apos;views/client_action.xml&apos;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h3&gt;&lt;p&gt;这个示例将创建一个菜单，点击触发一个客户端动作，关联js定义的对象，显示相应模板&lt;/p&gt;
&lt;p&gt;这个示例包括下面三个文件&lt;br&gt;&lt;img s
      
    
    </summary>
    
      <category term="Odoo" scheme="https://blog.wangyuehan.net/categories/Odoo/"/>
    
    
      <category term="开发" scheme="https://blog.wangyuehan.net/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何将console.log的内容导出到文件中</title>
    <link href="https://blog.wangyuehan.net/2019/07/30/console-log-to-file/"/>
    <id>https://blog.wangyuehan.net/2019/07/30/console-log-to-file/</id>
    <published>2019-07-30T05:48:08.000Z</published>
    <updated>2019-07-30T06:08:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Chrome浏览器的Console控制台中，使用<code>console.log()</code>命令可以输出js变量或字符串，但如何将这些输出保存到文件中呢</p><p>使用<a href="https://github.com/wangduanduan/log4b" target="_blank" rel="noopener">log4b.js</a>可以实现输出保存到文件，这个功能可用于在console中使用xpath获取页面内容并保存到文件</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1、载入log4b</p><p>js原生的<code>console.log()</code>无法输出到文件，下载<a href="https://github.com/wangduanduan/log4b" target="_blank" rel="noopener">log4b.js</a>文件，复制<code>log4b.js</code>的内容到console中执行</p><p>2、创建log4b对象</p><p>在console中执行</p><pre><code>var Log4b = new log4b();</code></pre><p>3、输出内容</p><p>使用<code>Log4b.log()</code>替代<code>console.log()</code>来输出内容</p><p>4、导出到文件</p><p>使用<code>Log4b.downloadLog()</code>可以下载由<code>Log4b.log()</code>输出的内容</p><h3 id="log4b使用"><a href="#log4b使用" class="headerlink" title="log4b使用"></a>log4b使用</h3><h4 id="log4b方法"><a href="#log4b方法" class="headerlink" title="log4b方法"></a>log4b方法</h4><pre><code>getLog: get log show on the console tabdownloadLog: download the logclear: clear all saved loglog:    write loglines: get how many lines of logsearch: search a string</code></pre><h4 id="log4b配置"><a href="#log4b配置" class="headerlink" title="log4b配置"></a>log4b配置</h4><pre><code>self.realTimeLoggingOn = true; // log in real time (forwards to console.log)self.useTimestamps = false; // insert a timestamp in front of each logself.recordLogs = true; // set to false after you&apos;re done debugging to avoid the log eating up memoryself.maxLines = 2500; // if autoTrim is true, this many most recent lines are savedself.lineMaxChars = 1500; // if one log is max than lineMaxChars, it will be cutself.logFilename = &apos;log4b.txt&apos;; // filename of log downloaded with downloadLog()self.lineBreak = &apos;\n\n&apos;;</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://segmentfault.com/a/1190000009426931" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009426931</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Chrome浏览器的Console控制台中，使用&lt;code&gt;console.log()&lt;/code&gt;命令可以输出js变量或字符串，但如何将这些输出保存到文件中呢&lt;/p&gt;
&lt;p&gt;使用&lt;a href=&quot;https://github.com/wangduanduan/log4b
      
    
    </summary>
    
      <category term="Web" scheme="https://blog.wangyuehan.net/categories/Web/"/>
    
    
      <category term="chrome" scheme="https://blog.wangyuehan.net/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Odoo交互式命令行shell</title>
    <link href="https://blog.wangyuehan.net/2019/07/25/odoo-shell/"/>
    <id>https://blog.wangyuehan.net/2019/07/25/odoo-shell/</id>
    <published>2019-07-25T15:54:38.000Z</published>
    <updated>2019-07-26T05:07:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Odoo shell是一个交互式命令行工具，它类似Python shell或Django  shell一样，可以在开发过程中调试Odoo内置对象和API函数，比如：测试对象有哪些属性和方法，或是测试API调用的返回是否达到预期</p><p>在命令行输入下面指令即可启动Odoo shell：</p><pre><code>python3 odoo-bin shell -c odoofile/odoo.conf -d test</code></pre><h3 id="shell类型"><a href="#shell类型" class="headerlink" title="shell类型"></a>shell类型</h3><p>Odoo shell有下面几种类型</p><ul><li>ipython（需安装ipython）</li><li>ptpython</li><li>bpython</li><li>python，默认使用python（无法按上输入历史命令，推荐使用ipython）</li></ul><p>通过参数shell-interface可以指定shell类型，如下所示使用ipython启动shell</p><pre><code>python3 odoo-bin shell -c odoofile/odoo.conf --shell-interface ipython -d test</code></pre><p><img src="http://image.wangyuehan.net//note/20190530150317.png" alt=""></p><h3 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h3><p>shell启动后提供以下几个变量</p><ul><li>env: odoo.api.Environment对象</li><li>odoo: odoo模块</li><li>openerp: odoo模块</li><li>self: res.user(1,)记录</li></ul><p><img src="http://image.wangyuehan.net//note/20190530150528.png" alt=""></p><h3 id="shell操作"><a href="#shell操作" class="headerlink" title="shell操作"></a>shell操作</h3><p><strong>1、获取模型列表</strong></p><p>registry是Odoo实例维护的信息中心，通过env.registry获取</p><p><code>env.registry.models</code>可以获取当前Odoo实例的模型列表，返回ModelClass和Model字典键值对</p><p><img src="http://image.wangyuehan.net//note/20190530150658.png" alt=""></p><p><strong>2、查看常用模型</strong></p><p>示例：product.product是ModelClass，odoo.api.product.product是Model<br><img src="http://image.wangyuehan.net//note/20190530150923.png" alt=""><br>1) 获取model的两种方式</p><ul><li>env.registry.models.get(‘product.product’)</li><li>env[‘product.product’]</li></ul><p>2) 访问基类</p><p>odoo.api.product.product 的基类可以通过<code>env.registry.get(&#39;product.product&#39;).__bases__</code>访问</p><p><strong>3、操作记录集</strong></p><ul><li>查询产品<code>env[&#39;product.product&#39;].search([])</code><br><img src="http://image.wangyuehan.net//note/20190530151223.png" alt=""></li><li>遍历产品名称<code>rec.name</code><br><img src="http://image.wangyuehan.net//note/20190530151338.png" alt=""></li><li>修改产品属性<code>rec.write()</code><br><img src="http://image.wangyuehan.net//note/20190530151656.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Odoo shell是一个交互式命令行工具，它类似Python shell或Django  shell一样，可以在开发过程中调试Odoo内置对象和API函数，比如：测试对象有哪些属性和方法，或是测试API调用的返回是否达到预期&lt;/p&gt;
&lt;p&gt;在命令行输入下面指令即可启动Od
      
    
    </summary>
    
      <category term="Odoo" scheme="https://blog.wangyuehan.net/categories/Odoo/"/>
    
    
      <category term="开发" scheme="https://blog.wangyuehan.net/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Odoo为序列号管理增加快捷生成日期范围</title>
    <link href="https://blog.wangyuehan.net/2019/07/24/odoo-sequence-range/"/>
    <id>https://blog.wangyuehan.net/2019/07/24/odoo-sequence-range/</id>
    <published>2019-07-24T05:49:36.000Z</published>
    <updated>2019-07-25T15:57:34.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h3><p>实现后效果如图所示，增加了范围类型、范围开始日期、范围结束日期和一个生成按钮</p><p><img src="http://image.wangyuehan.net/note/20190724/3rpDuWOszprp.png?imageslim" alt="mark"></p><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><p><strong>1、开发前找到修改目标</strong></p><p>首先激活开发者模式，通过菜单<code>Settings | Technical | Sequences</code>进入序列编辑界面，通过菜单<code>Open Developer Tools | Edit View: Form</code>查看表单视图，得到需要修改的模型为<code>ir.sequence</code>，视图为<code>base.sequence_view</code>（为了排除翻译导致的名称不一致，这里菜单名和截图使用英文的）</p><p><img src="http://image.wangyuehan.net/note/20190724/whzYyjDdJLaQ.png?imageslim" alt="mark"></p><p><strong>2、创建模块</strong></p><p>进入自己的模块目录中，使用脚手架生成模块结构</p><pre><code>cd C:/Project/odoo12-x64/source\odoo\custom-addonsC:\Project\venv\odoo12\Scripts\python.exe C:/Project/odoo12-x64/source/odoo-bin scaffold myapp_sequence</code></pre><p><img src="http://image.wangyuehan.net/note/20190724/JUo8oyO3vhsL.png?imageslim" alt="mark"></p><p><strong>3、继承序列模型，添加设置日期范围的字段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#models/models.py</span><br><span class="line"></span><br><span class="line">from odoo import models, fields, api</span><br><span class="line">class IrSequence(models.Model):</span><br><span class="line">    _inherit = &apos;ir.sequence&apos;</span><br><span class="line"></span><br><span class="line">    range_type = fields.Selection(selection=[(&apos;day&apos;,&apos;Day&apos;),(&apos;week&apos;,&apos;Week&apos;),(&apos;month&apos;,&apos;Month&apos;)],</span><br><span class="line">                                  string=&apos;范围类型&apos;)</span><br><span class="line">    range_from = fields.Date(string=&apos;范围开始日期&apos;)</span><br><span class="line">    range_to = fields.Date(string=&apos;范围结束日期&apos;)</span><br></pre></td></tr></table></figure><p><strong>4、继承序列表单视图，添加字段和按钮</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- views/views.xml --&gt;</span><br><span class="line">&lt;odoo&gt;</span><br><span class="line">  &lt;data&gt;</span><br><span class="line">    &lt;record model=&quot;ir.ui.view&quot; id=&quot;sequence_view_inherit&quot;&gt;</span><br><span class="line">      &lt;field name=&quot;name&quot;&gt;Sequences Inherit&lt;/field&gt;</span><br><span class="line">      &lt;field name=&quot;model&quot;&gt;ir.sequence&lt;/field&gt;</span><br><span class="line">      &lt;field name=&quot;inherit_id&quot; ref=&quot;base.sequence_view&quot;/&gt;</span><br><span class="line">      &lt;field name=&quot;arch&quot; type=&quot;xml&quot;&gt;</span><br><span class="line">        &lt;field name=&quot;use_date_range&quot; position=&quot;after&quot;&gt;</span><br><span class="line">          &lt;field name=&quot;range_type&quot; attrs=&quot;&#123;&apos;invisible&apos;: [(&apos;use_date_range&apos;, &apos;=&apos;, False)]&#125;&quot;/&gt;</span><br><span class="line">          &lt;button name=&quot;create_range&quot; type=&quot;object&quot; string=&quot;创建日期范围&quot; class=&quot;oe_edit_only oe_highlight&quot; attrs=&quot;&#123;&apos;invisible&apos;: [(&apos;use_date_range&apos;, &apos;=&apos;, False)]&#125;&quot;/&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;number_next_actual&quot; position=&quot;after&quot;&gt;</span><br><span class="line">          &lt;field name=&quot;range_from&quot; attrs=&quot;&#123;&apos;invisible&apos;: [(&apos;use_date_range&apos;, &apos;=&apos;, False)]&#125;&quot;/&gt;</span><br><span class="line">          &lt;field name=&quot;range_to&quot; attrs=&quot;&#123;&apos;invisible&apos;: [(&apos;use_date_range&apos;, &apos;=&apos;, False)]&#125;&quot;/&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">      &lt;/field&gt;</span><br><span class="line">    &lt;/record&gt;</span><br><span class="line">  &lt;/data&gt;</span><br><span class="line">&lt;/odoo&gt;</span><br></pre></td></tr></table></figure><p>其中</p><p><code>class=&quot;oe_edit_only oe_highlight&quot;</code> 表示按钮编辑时可见</p><p><code>attrs=&quot;{&#39;invisible&#39;: [(&#39;use_date_range&#39;, &#39;=&#39;, False)]}&quot;</code> 表示字段<code>use_date_range</code>为False时隐藏</p><p><strong>5、为按钮添加事件函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#models/models.py</span><br><span class="line"></span><br><span class="line">import datetime, calendar</span><br><span class="line">from odoo.exceptions import UserError</span><br><span class="line"></span><br><span class="line">#在class IrSequence中添加函数</span><br><span class="line">    def get_date_range_list(self, start_date, end_date, flags=&apos;day&apos;):</span><br><span class="line">        result = []</span><br><span class="line">        result.append(start_date)</span><br><span class="line">        if flags == &apos;day&apos;:</span><br><span class="line">            for n in range(int((end_date - start_date).days - 1)):</span><br><span class="line">                compute_date = start_date + datetime.timedelta(days=n + 1)</span><br><span class="line">                result.append(compute_date)</span><br><span class="line">        elif flags == &apos;week&apos;:</span><br><span class="line">            for n in range(int((end_date - start_date).days - 1)):</span><br><span class="line">                compute_date = start_date + datetime.timedelta(days=n + 1)</span><br><span class="line">                if compute_date.weekday() != calendar.MONDAY:</span><br><span class="line">                    continue</span><br><span class="line">                    result.append(compute_date)</span><br><span class="line">        elif flags == &apos;month&apos;:</span><br><span class="line">            for n in range(int((end_date - start_date).days - 1)):</span><br><span class="line">                compute_date = start_date + datetime.timedelta(days=n + 1)</span><br><span class="line">                if compute_date.day != 1:</span><br><span class="line">                    continue</span><br><span class="line">                result.append(compute_date)</span><br><span class="line">        result.append(end_date)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    @api.multi</span><br><span class="line">    def create_range(self, values):</span><br><span class="line">        self.ensure_one()</span><br><span class="line">        if not self.range_type or not self.range_from or not self.range_to:</span><br><span class="line">            raise UserError(&apos;请填写必要的参数（范围类型/范围开始日期/范围结束日期）&apos;)</span><br><span class="line">        if self.range_from &gt; self.range_to:</span><br><span class="line">            raise UserError(&apos;范围开始时间不能大于结束时间&apos;)</span><br><span class="line">        self.date_range_ids.unlink()</span><br><span class="line">        date_range = self.get_date_range_list(self.range_from, self.range_to, self.range_type)</span><br><span class="line">        print(date_range)</span><br><span class="line">        date_range_pair = list(dict(zip(date_range[:-1], date_range[1:])).items())</span><br><span class="line"></span><br><span class="line">        for date_from ,date_to  in date_range_pair:</span><br><span class="line">            values = &#123;&apos;number_next_actual&apos;: 1, &apos;date_from&apos;:date_from.strftime(&apos;%Y-%m-%d&apos;), &apos;date_to&apos;:date_to.strftime(&apos;%Y-%m-%d&apos;), &apos;sequence_id&apos;: self.id&#125;</span><br><span class="line">            self.date_range_ids.create(values)</span><br></pre></td></tr></table></figure><p><strong>6、安装并使用模块</strong></p><p>从应用中安装这个模块，进入序列号编辑表单，选择范围类型，范围开始日期和结束日期，点击创建日期范围，将清除之前的日期范围，按照规则重新创建日期范围</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实现目标&quot;&gt;&lt;a href=&quot;#实现目标&quot; class=&quot;headerlink&quot; title=&quot;实现目标&quot;&gt;&lt;/a&gt;实现目标&lt;/h3&gt;&lt;p&gt;实现后效果如图所示，增加了范围类型、范围开始日期、范围结束日期和一个生成按钮&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/
      
    
    </summary>
    
      <category term="Odoo" scheme="https://blog.wangyuehan.net/categories/Odoo/"/>
    
    
      <category term="开发" scheme="https://blog.wangyuehan.net/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Odoo模块创建步骤</title>
    <link href="https://blog.wangyuehan.net/2019/05/15/odoo-new-module/"/>
    <id>https://blog.wangyuehan.net/2019/05/15/odoo-new-module/</id>
    <published>2019-05-15T01:47:59.000Z</published>
    <updated>2019-07-24T06:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、进入模块目录（默认为<code>odoo/addons</code>），使用odoo-bin脚手架命令创建模块结构</p><pre><code>odoo-bin scaffold library_app</code></pre><p>模块结构如下</p><pre><code>└─library_app    │  __init__.py  #Python模块文件    │  __manifest__.py  #描述文件    │    ├─controllers   #Web控制器    │      controllers.py    │      __init__.py    │    ├─demo  #示例数据    │      demo.xml    │    ├─models    #业务对象    │      models.py    │      __init__.py    │    ├─security  #访问权限    │      ir.model.access.csv    │    └─views #视图            templates.xml            views.xml</code></pre><p>2、创建models文件</p><pre><code>#新建models/library_book.py，定义model类class Book(models.Model):...#编辑models/__init__.py中加入引用from . import library_book</code></pre><p>3、添加访问规则，为自定义用户组可以指定<code>base.group_user</code></p><pre><code>#编辑security/ir.model.access.csv，加入模型对象model_library_book的访问规则access_book_user,Book User Access,model_library_book,library_group_user,1,0,0,0...</code></pre><p>4、创建菜单及动作</p><pre><code>#新建views/library_menu.xml，添加菜单及动作#主菜单&lt;menuitem id=&quot;library_menu&quot;          name=&quot;Library&quot; /&gt;#菜单点击动作&lt;act_window id=&quot;action_library_book&quot;  name=&quot;Library Books&quot;  res_model=&quot;library.book&quot;  view_mode=&quot;tree,form&quot;/&gt;#子菜单&lt;menuitem id=&quot;menu_library_book&quot;          name=&quot;Book&quot;          action=&quot;action_library_book&quot;          parent=&quot;library_menu&quot; /&gt;</code></pre><p>5、创建视图，定义form、tree、search视图</p><pre><code>#新建views/book_view.xml，添加form、tree、search视图&lt;record id=&quot;view_form_book&quot; model=&quot;ir.ui.view&quot;&gt;&lt;form&gt;...&lt;record id=&quot;view_tree_book&quot; model=&quot;ir.ui.view&quot;&gt;&lt;tree&gt;...&lt;record id=&quot;view_search_book&quot; model=&quot;ir.ui.view&quot;&gt;&lt;search&gt;...</code></pre><p>6、编辑<code>__manifest__.py</code>，data和demo中引用数据文件csv或xml</p><pre><code>&apos;data&apos;: [   &apos;security/ir.model.access.csv&apos;,   &apos;views/library_menu.xml&apos;,   &apos;views/book_view.xml&apos;,   ...],&apos;demo&apos;: [   &apos;data/book_demo.xml&apos;,],</code></pre><blockquote><p>问题：如果菜单不显示，请检查<strong>manifest</strong>.py中是否没有正常引用数据文件</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、进入模块目录（默认为&lt;code&gt;odoo/addons&lt;/code&gt;），使用odoo-bin脚手架命令创建模块结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;odoo-bin scaffold library_app
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;模块结构如下&lt;/p&gt;
&lt;pre&gt;
      
    
    </summary>
    
      <category term="Odoo" scheme="https://blog.wangyuehan.net/categories/Odoo/"/>
    
    
      <category term="开发" scheme="https://blog.wangyuehan.net/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Charles抓取请求</title>
    <link href="https://blog.wangyuehan.net/2019/03/07/charles-config/"/>
    <id>https://blog.wangyuehan.net/2019/03/07/charles-config/</id>
    <published>2019-03-07T06:39:50.000Z</published>
    <updated>2019-03-07T06:50:39.140Z</updated>
    
    <content type="html"><![CDATA[<p>Charles是一个HTTP代理服务器，当浏览器连接Charles的代理访问互联网时，可以监控浏览器发送和接收的所有数据。</p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><ul><li>MacOS 10.14.3</li><li>Charles 4.2.7</li><li>小米MIX2 Android MIUI10.2.2</li></ul><h3 id="1、下载并安装Charles"><a href="#1、下载并安装Charles" class="headerlink" title="1、下载并安装Charles"></a>1、下载并安装Charles</h3><p><a href="https://www.charlesproxy.com/latest-release/download.do" target="_blank" rel="noopener">下载地址</a>    </p><p>工作界面和常用按钮<br><img src="http://image.wangyuehan.net//note/20190307141052charles.png" alt=""></p><h3 id="2、配置抓取HTTP请求"><a href="#2、配置抓取HTTP请求" class="headerlink" title="2、配置抓取HTTP请求"></a>2、配置抓取HTTP请求</h3><ul><li><p>配置代理，「Proxy Settings」<br><img src="http://image.wangyuehan.net//note/20190307115032charles.png" alt=""></p></li><li><p>抓取电脑端请求，菜单「Proxy」中，「macOS Proxy」打上勾，同时需要关闭开启的VPN代理<br><img src="http://image.wangyuehan.net//note/20190307114939charles.png" alt=""></p></li><li><p>抓取手机端请求，配置手机使用Charles代理<br>首先手机和电脑端连接同一个wifi，在手机「设置」—「WLAN」中，进入连接的WLAN，「代理」选择手动，填写主机名、端口<br><img src="http://image.wangyuehan.net//note/20190307120737charles.png" alt=""></p></li></ul><h3 id="3、配置抓取HTTPS请求"><a href="#3、配置抓取HTTPS请求" class="headerlink" title="3、配置抓取HTTPS请求"></a>3、配置抓取HTTPS请求</h3><ul><li><p>电脑端配置SSL，「SSL Proxying Settings」<br><img src="http://image.wangyuehan.net//note/20190307115117charles.png" alt=""></p></li><li><p>电脑端信任证书<br><img src="http://image.wangyuehan.net//note/20190307115903charles.png" alt=""><br><img src="http://image.wangyuehan.net//note/20190307142935charles.png" alt=""></p></li><li>手机端下载证书，将下载的证书文件扩展名pem改为crt，即可安装<br><img src="http://image.wangyuehan.net//note/20190307141427charles.png" alt=""></li></ul><p>安装证书后部分HTTPS请求可以正常获取，还有大部分显示<code>&lt;unknown&gt;</code>，待后续研究<br><img src="http://image.wangyuehan.net//note/20190307144711charles.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Charles是一个HTTP代理服务器，当浏览器连接Charles的代理访问互联网时，可以监控浏览器发送和接收的所有数据。&lt;/p&gt;
&lt;h3 id=&quot;运行环境&quot;&gt;&lt;a href=&quot;#运行环境&quot; class=&quot;headerlink&quot; title=&quot;运行环境&quot;&gt;&lt;/a&gt;运行环境&lt;
      
    
    </summary>
    
      <category term="Web" scheme="https://blog.wangyuehan.net/categories/Web/"/>
    
    
      <category term="tools" scheme="https://blog.wangyuehan.net/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Git-如何将未跟踪的例外文件拉到本地</title>
    <link href="https://blog.wangyuehan.net/2019/02/12/git-get-file-of-gitignore/"/>
    <id>https://blog.wangyuehan.net/2019/02/12/git-get-file-of-gitignore/</id>
    <published>2019-02-12T03:54:18.000Z</published>
    <updated>2019-02-14T05:47:59.564Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>远程仓库中添加了一些未跟踪的例外文件到.gitignore中，通过git clone到本地仓库中，这些文件会缺失，通过下面步骤可以获取这些例外文件，便于搭建本地环境</p></blockquote><p>1、远程仓库：新建并切换到分支allfile</p><pre><code>git checkout -b allfile</code></pre><p>2、远程仓库：修改.gitignore文件，移除例外文件</p><pre><code>vim .gitignore去除内容public/uploads</code></pre><p>3、远程仓库：添加所有文件并提交</p><pre><code>git add .git commit -m &quot;add all file&quot;</code></pre><p>4、本地仓库：拉取远程分支</p><pre><code>git pull </code></pre><p>6、本地仓库：迁出allfile分支中的例外文件</p><pre><code>git checkout allfile public/uploads</code></pre><p>7、本地仓库：去除例外文件的跟踪</p><pre><code>git rm -r --cached public/uploads</code></pre><p>此时例外文件<code>public/uploads</code>将保留在本地仓库并不被跟踪</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;远程仓库中添加了一些未跟踪的例外文件到.gitignore中，通过git clone到本地仓库中，这些文件会缺失，通过下面步骤可以获取这些例外文件，便于搭建本地环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、远程仓库：新建并切换到分支allfi
      
    
    </summary>
    
      <category term="Git" scheme="https://blog.wangyuehan.net/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Git-部署本地代码到远程仓库</title>
    <link href="https://blog.wangyuehan.net/2019/01/30/git-deploy-local-to-remote/"/>
    <id>https://blog.wangyuehan.net/2019/01/30/git-deploy-local-to-remote/</id>
    <published>2019-01-30T06:08:35.000Z</published>
    <updated>2019-02-14T06:21:24.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这样部署的前提是已经配置好远程服务器 <a href="http://www.xxxx.net" target="_blank" rel="noopener">www.xxxx.net</a> 中用户www的免密登录</p></blockquote><ol><li>本地项目代码准备完毕，代码中无.gitignore文件</li><li><p>初始化本地仓库，在本地执行</p><pre><code>#初始化仓库git init    #windows中禁用自动转换git config --global core.autocrlf false#缓存文件git add .#提交本地仓库git commit -m &quot;init&quot;#创建远程连接git remote add origin www@www.xxxx.net:/home/www/heal     </code></pre></li><li><p>初始化远程仓库，在远程执行</p><pre><code>#创建远程仓库目录cd /home/wwwmkdir heal#进入目录cd heal#初始化仓库git init#设置允许修改当前分支git config receive.denyCurrentBranch ignore#添加钩子自动checkoutvim .git/hooks/post-receive#添加以下代码    echo &quot;checkout to HEAD&quot;    git --work-tree=.. checkout -f#赋予权限chown www:www -R ../heal#设置用户www的bashusermod -s /bin/bash www</code></pre></li><li><p>将本地仓库推送到远程，在本地执行</p><pre><code>git push -u origin master#此时本地代码与远程仓库代码一致</code></pre></li><li><p>添加或更新例外文件.gitignore，在远程执行</p><pre><code>vim .gitignoregit rm -r --cached .git add .git commit -m &apos;gitignore update&apos;</code></pre></li><li><p>本地更新</p><pre><code>#下载更新（在.gitignore中的内容不会下载到本地）git pull</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这样部署的前提是已经配置好远程服务器 &lt;a href=&quot;http://www.xxxx.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.xxxx.net&lt;/a&gt; 中用户www的免密登录&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
      <category term="Git" scheme="https://blog.wangyuehan.net/categories/Git/"/>
    
    
      <category term="deploy" scheme="https://blog.wangyuehan.net/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>Python包管理工具：easy_install和pip的安装和使用</title>
    <link href="https://blog.wangyuehan.net/2019/01/07/python-setuptools-pip-install/"/>
    <id>https://blog.wangyuehan.net/2019/01/07/python-setuptools-pip-install/</id>
    <published>2019-01-07T07:55:22.000Z</published>
    <updated>2019-03-07T08:15:15.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、easy-install安装和使用"><a href="#一、easy-install安装和使用" class="headerlink" title="一、easy_install安装和使用"></a>一、easy_install安装和使用</h2><p>easy_install 是一个基于setuptools的工具，帮助我们自动下载、编译、安装和管理python packages。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>Linux包管理器安装</p><pre><code>yum install python-setuptools</code></pre></li><li><p>源码安装(windows、linux都适用)</p><p>  下载地址： <a href="https://pypi.org/project/distribute/#files" target="_blank" rel="noopener">https://pypi.org/project/distribute/#files</a></p><pre><code>wget https://files.pythonhosted.org/packages/5f/ad/1fde06877a8d7d5c9b60eff7de2d452f639916ae1d48f0b8f97bf97e570a/distribute-0.7.3.zipunzip distribute-0.7.3.zipcd distribute-0.7.3python3 setup.py install</code></pre></li></ul><h3 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h3><pre><code>#安装包：easy_install pyspider#删除包：easy_install -m  pyspider#升级:easy_install  --upgrade pyspider</code></pre><h2 id="二、pip安装和使用"><a href="#二、pip安装和使用" class="headerlink" title="二、pip安装和使用"></a>二、pip安装和使用</h2><p>pip是一个通用的 Python 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul><li><p>Linux包管理器安装</p><pre><code>yum install python-pip</code></pre></li><li><p>源码安装(windows、linux都适用)</p><p>  下载地址： <a href="https://pypi.org/project/pip/#files" target="_blank" rel="noopener">https://pypi.org/project/pip/#files</a></p><pre><code>wget https://files.pythonhosted.org/packages/45/ae/8a0ad77defb7cc903f09e551d88b443304a9bd6e6f124e75c0fbbf6de8f7/pip-18.1.tar.gztar zxvf pip-18.1.tar.gzcd pip-18.1python3 setup.py install</code></pre></li></ul><h3 id="使用命令-1"><a href="#使用命令-1" class="headerlink" title="使用命令"></a>使用命令</h3><pre><code>#安装包：pip install pyspider#查看包：pip show pyspider#升级：pip install --upgrade#删除包 ：pip  uninstall pyspider</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、easy-install安装和使用&quot;&gt;&lt;a href=&quot;#一、easy-install安装和使用&quot; class=&quot;headerlink&quot; title=&quot;一、easy_install安装和使用&quot;&gt;&lt;/a&gt;一、easy_install安装和使用&lt;/h2&gt;&lt;p&gt;ea
      
    
    </summary>
    
      <category term="Python" scheme="https://blog.wangyuehan.net/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Git-如何删除untracked files（未跟踪）的文件</title>
    <link href="https://blog.wangyuehan.net/2019/01/04/git-delete-untracked-files/"/>
    <id>https://blog.wangyuehan.net/2019/01/04/git-delete-untracked-files/</id>
    <published>2019-01-04T06:01:45.000Z</published>
    <updated>2019-02-14T06:06:12.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>清理Git仓库中未跟踪的文件时可以使用下面命令</p></blockquote><p>删除untracked文件</p><pre><code>git clean -f</code></pre><p>删除untracked文件</p><pre><code>git clean -fd</code></pre><p>删除.gitignore的untracked文件</p><pre><code>git clean -xfd</code></pre><p>使用上面git clean之前，建议使用-n参数查看会删除哪些文件</p><pre><code>git clean -nxfdgit clean -nfgit clean -nfd</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;清理Git仓库中未跟踪的文件时可以使用下面命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;删除untracked文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clean -f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除untracked文件&lt;/p&gt;
&lt;pr
      
    
    </summary>
    
      <category term="Git" scheme="https://blog.wangyuehan.net/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>软件（系统）开发、维护、集成价格估算（学习笔记）</title>
    <link href="https://blog.wangyuehan.net/2018/11/29/software-service-price/"/>
    <id>https://blog.wangyuehan.net/2018/11/29/software-service-price/</id>
    <published>2018-11-29T03:50:40.000Z</published>
    <updated>2019-03-09T14:55:08.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、软件（系统）开发报价"><a href="#一、软件（系统）开发报价" class="headerlink" title="一、软件（系统）开发报价"></a>一、软件（系统）开发报价</h3><p><strong>软件开发价格 ＝ A（估算工作量） × σ（软件人员月平均工资） × τ（风险系数） × B（复用系数） × λ（综合系数）</strong></p><pre><code>A：估算工作量经验值B：软件企业的平均工资／人·月σ：风险系数l ≤ Q ≤ 1.5τ：复用系数0.25 ≤ τ ≤ 1λ：综合系数（国内）2.7 ≤ λ ≤ 3.09（综合了公司税收利润、管理系数、优质系数）</code></pre><p>分解计算过程展开</p><p>软件开发价格 ＝ 开发工作量 × 开发费用／人·月  </p><p>软件开发工作量 ＝ 估算工作量经验值A × 风险系数σ × 复用系数τ</p><pre><code>风险系数：l ≤ σ ≤ 1.5（业务领域不熟悉，用户需求不明确）复用系数：0.25（实施基于构件开发方法，已有可复用的构件库） ≤ τ ≤ 1</code></pre><p>开发费用／人·月 ＝（P＋Q＋R）× S× T</p><pre><code>P（人员成本） ＝ B（月平均工资） × 1.476（公积金7%、医疗保险12%、养老金22%、失业金2%、工伤0.5%，生育0.5%，残疾基金1.6%，工会基金2%，累计47.6%）Q（办公费） ＝ B／3R（国家税收和企业利润） ＝ B／3S（管理系数）：1 ≤ S ≤ 1.2 （十个软件人员需要两个管理人员）T（优质系数，提高软件质量，必然有所开支，即质量成本）：1.05 &lt;= T &lt;= 1.2</code></pre><h3 id="二、软件（系统）维护费用"><a href="#二、软件（系统）维护费用" class="headerlink" title="二、软件（系统）维护费用"></a>二、软件（系统）维护费用</h3><p><strong>根据不同用户的要求，分为四种级别分别按照开发费用的15%、10%、5%或按次计算收取软件（系统）维护费用</strong></p><p>首先定义U（系统建设费用），也就是该应用软件（系统）开发费用</p><ol><li><p>A级：软件企业派出技术人员常驻用户，解决日常运行中发生的问题。</p><pre><code>软件企业派出N个技术人员，常驻用户，因此：软件（系统）维护费／年 ＝ U × 15% 或 B × λ × N × 12</code></pre></li><li><p>B级：软件企业每周七天，每天24小时（即7×24小时）响应，2小时到现场，且每天派技术人员到现场进行软件（系统）性能调试，使之运行处于良好状态。</p><pre><code>软件（系统）维护费／年 ＝ U × 10%</code></pre></li><li><p>C级：软件企业7×24小时响应，2小时到场。</p><pre><code>软件（系统）维护费／年＝U × 5%</code></pre></li><li><p>D级：用户的信息工程系统或应用软件发生问题，由原承担的软件企业派人维护。</p><pre><code>软件（系统）维护费／次＝B’（人·天） × τ’（同复用系数）× n</code></pre></li></ol><h3 id="三、系统集成价格估算方法"><a href="#三、系统集成价格估算方法" class="headerlink" title="三、系统集成价格估算方法"></a>三、系统集成价格估算方法</h3><p><strong>系统集成费 ＝ U（系统建设费用） × α（四种级别的复杂程度） × T（优质系数）</strong></p><p>复杂程度（以α来表示）可分四种级别来区分</p><ol><li><p>A级：整个系统涉及到计算机硬件、软件、局域网络，且体系结构在三层次以下（含三层次）。</p><pre><code>5% ≤ α ≤ 8%</code></pre></li><li><p>B级：整个系统涉及到计算机硬件、软件、局域网络、互联网，且体系结构在三层以上（含三层次）。</p><pre><code>7% ≤ α ≤ 10%</code></pre></li><li><p>C级：整个系统涉及到计算机硬件、软件、局域网络、互联网以及多种网络接口。</p><pre><code>8% ≤ α ≤ 12%</code></pre></li><li><p>D级：整个系统涉及到计算机硬件、软件、网络、通信以及各种数据采集设备接口或者与用主系统有接口。</p><pre><code>10% ≤ α ≤ 15%</code></pre></li></ol><p>学习文章<a href="https://wenku.baidu.com/view/48805bedf8c75fbfc77db29a.html" target="_blank" rel="noopener">《软件开发和服务项目价格构成及评估方法》</a>的笔记</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、软件（系统）开发报价&quot;&gt;&lt;a href=&quot;#一、软件（系统）开发报价&quot; class=&quot;headerlink&quot; title=&quot;一、软件（系统）开发报价&quot;&gt;&lt;/a&gt;一、软件（系统）开发报价&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;软件开发价格 ＝ A（估算工作量） × σ（
      
    
    </summary>
    
      <category term="软件工程" scheme="https://blog.wangyuehan.net/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Git-配置difftools和mergetool使用kaleidoscope</title>
    <link href="https://blog.wangyuehan.net/2018/11/22/git-difftool/"/>
    <id>https://blog.wangyuehan.net/2018/11/22/git-difftool/</id>
    <published>2018-11-22T15:34:30.000Z</published>
    <updated>2019-02-14T06:03:53.316Z</updated>
    
    <content type="html"><![CDATA[<p>1、Mac下载并安装kaleidoscope和ksdiff（<a href="https://www.kaleidoscopeapp.com/ksdiff2" target="_blank" rel="noopener">下载地址</a>），确保命令行中可以运行<code>ksdiff</code>命令</p><p>2、修改GIT配置文件<code>~/.gitconfig</code>，加入下面内容</p><pre><code>[diff]    tool = Kaleidoscope[difftool &quot;Kaleidoscope&quot;]    cmd = ksdiff --partial-changeset --relative-path \&quot;$MERGED\&quot; -- \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;[difftool]    prompt = false[merge]    tool = Kaleidoscope[mergetool &quot;Kaleidoscope&quot;]    cmd = ksdiff --merge --output &quot;$MERGED&quot; --base &quot;$BASE&quot; -- &quot;$LOCAL&quot; --snapshot &quot;$REMOTE&quot; --snapshot    trustExitCode = true[mergetool]    prompt = false</code></pre><p>3、命令行中运行<code>git difftool</code>或<code>git mergetool</code>（git difftool用于与git diff相同）将使用kaleidoscope打开对比的文件<br><img src="http://image.wangyuehan.net//note/20181122234201git-difftool.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、Mac下载并安装kaleidoscope和ksdiff（&lt;a href=&quot;https://www.kaleidoscopeapp.com/ksdiff2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;），确保命令行中可以运行&lt;code&gt;
      
    
    </summary>
    
      <category term="Git" scheme="https://blog.wangyuehan.net/categories/Git/"/>
    
    
      <category term="tools" scheme="https://blog.wangyuehan.net/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>sudo执行管道命令报错</title>
    <link href="https://blog.wangyuehan.net/2018/11/16/problem-ubuntu-sudo/"/>
    <id>https://blog.wangyuehan.net/2018/11/16/problem-ubuntu-sudo/</id>
    <published>2018-11-15T16:23:54.000Z</published>
    <updated>2019-02-14T05:52:10.770Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：Ubuntu中执行<code>sudo iptables-save &gt; /etc/iptables.rules</code>报错Permission denied</p><p>问题分析：命令中有管道，第一个命令iptables -L有sudo，但是管道后的第二个命令没有sudo，所以报错</p><p>问题解决：</p><pre><code>sudo bash -c &apos;iptables-save &gt; /etc/iptables.rules&apos;或echo &apos;iptables-save &gt; /etc/iptables.rules&apos; | sudo bash</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题描述：Ubuntu中执行&lt;code&gt;sudo iptables-save &amp;gt; /etc/iptables.rules&lt;/code&gt;报错Permission denied&lt;/p&gt;
&lt;p&gt;问题分析：命令中有管道，第一个命令iptables -L有sudo，但是管道后的
      
    
    </summary>
    
      <category term="Linux" scheme="https://blog.wangyuehan.net/categories/Linux/"/>
    
    
      <category term="problem" scheme="https://blog.wangyuehan.net/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令：iptables</title>
    <link href="https://blog.wangyuehan.net/2018/11/16/linux-command-iptables/"/>
    <id>https://blog.wangyuehan.net/2018/11/16/linux-command-iptables/</id>
    <published>2018-11-15T16:18:18.000Z</published>
    <updated>2019-03-07T07:17:31.690Z</updated>
    
    <content type="html"><![CDATA[<p>iptables命令用于linux下防火墙规则管理，可以对指定协议、来源、端口的访问数据进行放行或丢弃</p><h3 id="1、添加iptables规则"><a href="#1、添加iptables规则" class="headerlink" title="1、添加iptables规则"></a>1、添加iptables规则</h3><pre><code>iptables -A INPUT -p tcp -s 192.168.0.104 --dport 3306 -j ACCEPTiptables -A INPUT -p tcp --dport 3306 -j DROP#-A INPUT or OUT 进还是出的规则#-p tcp or udp协议#-s 源ip地址 #--dport 端口号#-j ACCEPT 允许 REJECT 拒绝 DROP 丢弃</code></pre><h3 id="2、删除iptables规则"><a href="#2、删除iptables规则" class="headerlink" title="2、删除iptables规则"></a>2、删除iptables规则</h3><pre><code>#查看规则行号iptables -L -n INPUT --line-numbers#-L --list 显示规则#-n 端口显示数字#--line-numbers 显示规则编号，用于删除#删除规则iptables -D INPUT 3</code></pre><h3 id="3、保存iptables规则，使之重启后有效"><a href="#3、保存iptables规则，使之重启后有效" class="headerlink" title="3、保存iptables规则，使之重启后有效"></a>3、保存iptables规则，使之重启后有效</h3><ul><li><p>centos6</p><pre><code>service iptables save#或#修改/etc/sysconfig/iptables配置文件中的规则后重启服务service iptables restart</code></pre></li><li><p>centos7（默认使用firewall，停用firewall后安装iptables，就与centos6相同）</p><pre><code>#停用firewallsystemctl stop firewall .service        #停止firewallsystemctl disable firewall.service  #禁止开机启动firewallfirewall-cmd --status           #查看firewall状态#安装iptablesyum install iptables-servicesystemctl enable iptablessystemctl start iptables</code></pre></li><li><p>ubuntu（使用iptables-save和iptables-restore）</p><p>  手动保存</p><pre><code>#1.保存iptables规则到文件#sudo iptables-save &gt; /etc/iptables.rules会报错sudo bash -c &apos;iptables-save &gt; /etc/iptables.rules&apos;#2.设置网络配置文件中加载该文件vim /etc/network/interfaces加入pre-up iptables-restore &lt; /etc/iptables.up.rules</code></pre><p>  重启自动生效</p><pre><code>#1.新增网络关闭自动执行脚本vim /etc/network/if-post-down.d/iptables内容为    #!/bin/bash    iptables-save &gt; /etc/iptables.rules#2.新增网络开启自动执行脚本sudo vim /etc/network/if-pre-up.d/iptables内容为    #!/bin/bash    iptables-restore &lt; /etc/iptables.rules#3.给两个脚本执行权限sudo chmod +x /etc/network/if-post-down.d/iptablessudo chmod +x /etc/network/if-pre-up.d/iptables</code></pre></li></ul><h3 id="4、常用功能"><a href="#4、常用功能" class="headerlink" title="4、常用功能"></a>4、常用功能</h3><h4 id="白名单规则"><a href="#白名单规则" class="headerlink" title="白名单规则"></a>白名单规则</h4><p>比如开通本机的22端口，允许192.168.1.0网段的服务器访问（-t filter表配置可以省略，默认就是这种表的配置）</p><pre><code>iptables -A INPUT -s 192.168.1.0/24 -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</code></pre><p>或者</p><pre><code>iptables -t filter -A INPUT -s 192.168.1.0/24 -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</code></pre><p>开通本机的80端口，只允许192.168.1.150机器访问（32位掩码表示单机，单机指定时可以不加掩码）</p><pre><code>iptables -t filter -A INPUT -s 192.168.1.150/32 -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</code></pre><p>然后保存规则，重启iptables</p><pre><code>service iptables saveservice iptables restart</code></pre><p>或者在/etc/sysconfig/iptables文件里设置如下（其实上面在终端命令行里设置并save和restart防火墙后，就会自动保存规则到/etc/sysconfig/iptables这个文件中的）：</p><pre><code>cat /etc/sysconfig/iptables    ......    *filter    :INPUT ACCEPT [442620:173026884]    :FORWARD ACCEPT [118911:23993940]    :OUTPUT ACCEPT [8215384:539509656]    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT     -A INPUT -p icmp -j ACCEPT     -A INPUT -i lo -j ACCEPT     -A INPUT -s 192.168.1.0/24 -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT    -A INPUT -s 192.168.1.150/32 -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPTservice iptables restart</code></pre><h4 id="NAT转发设置"><a href="#NAT转发设置" class="headerlink" title="NAT转发设置"></a>NAT转发设置</h4><p>比如访问本机（192.168.1.7）的8088端口转发到192.168.1.160的80端口；访问本机的33066端口转发到192.168.1.161的3306端口<br>准备工作：<br>本机打开ip_forword路由转发功能；192.168.1.160/161的内网网关要和本机网关一致！如果没有内网网关，就将网关设置成本机内网ip，并且关闭防火墙（防火墙要是打开了，就设置对应端口允许本机访问）</p><pre><code>iptables -t nat -A PREROUTING -p tcp -m tcp --dport 8088 -j DNAT --to-destination 192.168.1.160:80iptables -t nat -A POSTROUTING -d 192.168.1.160/32 -p tcp -m tcp --sport 80 -j SNAT --to-source 192.168.1.7iptables -t filter -A INPUT -p tcp -m state --state NEW -m tcp --dport 8088 -j ACCEPTiptables -t nat -A PREROUTING -p tcp -m tcp --dport 33066 -j DNAT --to-destination 192.168.1.161:3306iptables -t nat -A POSTROUTING -d 192.168.1.161/32 -p tcp -m tcp --sport 3306 -j SNAT --to-source 192.168.1.7iptables -t filter -A INPUT -p tcp -m state --state NEW -m tcp --dport 33066 -j ACCEPTservice iptables saveservice iptables restart</code></pre><p>或者在/etc/sysconfig/iptables文件里设置如下</p><pre><code>cat /etc/sysconfig/iptables    ......    *nat    :PREROUTING ACCEPT [60:4250]    :INPUT ACCEPT [31:1973]    :OUTPUT ACCEPT [3:220]    :POSTROUTING ACCEPT [3:220]    -A PREROUTING -p tcp -m tcp --dport 8088 -j DNAT --to-destination 192.168.1.160:80                              //PREROUTING规则都放在上面    -A PREROUTING -p tcp -m tcp --dport 33066 -j DNAT --to-destination 192.168.1.161:3306    -A POSTROUTING -d 192.168.1.160/32 -p tcp -m tcp --sport 80 -j SNAT --to-source 192.168.1.7             //POSTROUTING规则都放在下面    -A POSTROUTING -d 192.168.1.161/32 -p tcp -m tcp --sport 3306 -j SNAT --to-source 192.168.1.7    .....    *filter    :INPUT ACCEPT [16:7159]    :FORWARD ACCEPT [0:0]    :OUTPUT ACCEPT [715:147195]    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT    -A INPUT -p icmp -j ACCEPT    -A INPUT -i lo -j ACCEPT    -A INPUT -p tcp -m state --state NEW -m tcp --dport 8088 -j ACCEPT    -A INPUT -p tcp -m state --state NEW -m tcp --dport 33066 -j ACCEPT    .....service iptables restart</code></pre><h4 id="查看规则列表"><a href="#查看规则列表" class="headerlink" title="查看规则列表"></a>查看规则列表</h4><pre><code>iptables -L                      //列出设置的规则，默认列出的是filter表下的规则iptables -L -t nat            //如果列出nat表下规则，就加-t参数</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;iptables命令用于linux下防火墙规则管理，可以对指定协议、来源、端口的访问数据进行放行或丢弃&lt;/p&gt;
&lt;h3 id=&quot;1、添加iptables规则&quot;&gt;&lt;a href=&quot;#1、添加iptables规则&quot; class=&quot;headerlink&quot; title=&quot;1、添加i
      
    
    </summary>
    
      <category term="Linux" scheme="https://blog.wangyuehan.net/categories/Linux/"/>
    
    
      <category term="command" scheme="https://blog.wangyuehan.net/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>Centos7中安装LNMP</title>
    <link href="https://blog.wangyuehan.net/2018/10/30/lnmp-install/"/>
    <id>https://blog.wangyuehan.net/2018/10/30/lnmp-install/</id>
    <published>2018-10-30T08:15:37.000Z</published>
    <updated>2019-02-14T05:48:22.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装LNMP"><a href="#安装LNMP" class="headerlink" title="安装LNMP"></a>安装LNMP</h2><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><ol><li><p>下载</p><p> 访问<a href="https://lnmp.org/download.html" target="_blank" rel="noopener">下载地址</a>，找到需要安装的版本的下载地址<br> 如：<code>http://soft1.vpser.net/lnmp/lnmp1.5-full.tar.gz</code>  </p><pre><code>wget http://soft1.vpser.net/lnmp/lnmp1.5-full.tar.gz</code></pre><p> 为了防止安装时掉线，建议使用screen</p><pre><code>yum install screen  #安装screenscreen -S lnmp      #指定screen作业的名称#开始执行安装过程，如果掉线执行下面命令恢复screen -r lnmp      #恢复离线的screen作业screen -list            #列出所有会话</code></pre></li><li><p>解压安装</p><pre><code>tar -zxvf lnmp1.5-full.tar.gzcd lnmp1.5-full./install.sh {lnmp|lnmpa|lamp}  #需选择安装的类型#按照提示选择mysql、php版本安装</code></pre></li></ol><h3 id="默认安装目录"><a href="#默认安装目录" class="headerlink" title="默认安装目录"></a>默认安装目录</h3><pre><code>Nginx：/usr/local/nginx/MySQL：/usr/local/mysql/MariaDB：/usr/local/mariadb/PHP：/usr/local/php/多PHP目录：/usr/local/php5.6/ 版本号随安装版本不同而不同PHP扩展插件配置文件目录：/usr/local/php/conf.d/PHPMyAdmin：/home/wwwroot/default/phpmyadmin/默认虚拟主机网站目录：/home/wwwroot/default/Nginx日志目录：/home/wwwlogs/</code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code>Nginx主配置文件：/usr/local/nginx/conf/nginx.confMySQL/MariaDB配置文件：/etc/my.cnfPHP配置文件：/usr/local/php/etc/php.iniPHP-FPM配置文件：/usr/local/php/etc/php-fpm.confPureFtpd配置文件：/usr/local/pureftpd/etc/pure-ftpd.confApache配置文件：/usr/local/apache/conf/httpd.conf</code></pre><h2 id="各应用对应的文件"><a href="#各应用对应的文件" class="headerlink" title="各应用对应的文件"></a>各应用对应的文件</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li><p>安装目录</p><pre><code>/usr/local/nginx</code></pre></li><li><p>配置文件</p><pre><code>/usr/local/nginx/conf</code></pre></li><li><p>日志文件<br>  日志文件在配置文件中设置  </p><pre><code>error_log  错误日志http{log_format}        日志格式http{access_log}    nginx访问日志server{access_log}  server访问日志默认设置/usr/local/nginx/logs/error.log/usr/local/nginx/logs/access.log/usr/local/nginx/logs/host.access.log</code></pre></li><li><p>PID</p><pre><code>/usr/local/nginx/logs/nginx.pid</code></pre></li><li><p>listen</p><pre><code>监听端口：80监听进程用户：在`/usr/local/nginx/conf`文件中`user www;`配置</code></pre></li></ul><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><ul><li><p>安装目录</p><pre><code>Mysql：/usr/local/mysqlMariaDB：/usr/local/mariadb/</code></pre></li><li><p>配置文件</p><pre><code>/etc/my.cnf</code></pre></li><li><p>日志文件</p><pre><code>/usr/local/mysql/var/目录下通过下面查询语句查看日志设置及路径 show global variables like &apos;%LOG%&apos;;</code></pre></li><li><p>listen</p><pre><code>监听端口：3306监听socket：/tmp/mysql.sock</code></pre><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3></li><li><p>安装目录</p><pre><code>/usr/local/php</code></pre></li><li><p>配置文件</p><pre><code>/usr/local/php/etc/php-fpm.conf/usr/local/php/etc/php.ini</code></pre></li><li><p>日志文件</p><pre><code>/usr/local/php/var/log/php-fpm.log/usr/local/php/var/log/slow.log</code></pre></li><li><p>PID</p><pre><code>/usr/local/php/var/run/php-fpm.pid</code></pre></li><li><p>Listen</p><pre><code>监听socket：/tmp/php-cgi.sock监听进程用户：在`/usr/local/php/etc/php-fpm.conf`文件中`listen.owner = www`配置</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装LNMP&quot;&gt;&lt;a href=&quot;#安装LNMP&quot; class=&quot;headerlink&quot; title=&quot;安装LNMP&quot;&gt;&lt;/a&gt;安装LNMP&lt;/h2&gt;&lt;h3 id=&quot;安装过程&quot;&gt;&lt;a href=&quot;#安装过程&quot; class=&quot;headerlink&quot; title=&quot;安
      
    
    </summary>
    
      <category term="Linux" scheme="https://blog.wangyuehan.net/categories/Linux/"/>
    
    
      <category term="php" scheme="https://blog.wangyuehan.net/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Mac下Python多版本管理pyenv和pyenv-virtualenv</title>
    <link href="https://blog.wangyuehan.net/2018/10/29/pyenv-virtualenv/"/>
    <id>https://blog.wangyuehan.net/2018/10/29/pyenv-virtualenv/</id>
    <published>2018-10-29T03:51:19.000Z</published>
    <updated>2018-10-30T08:26:11.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、pyenv安装和使用"><a href="#一、pyenv安装和使用" class="headerlink" title="一、pyenv安装和使用"></a>一、pyenv安装和使用</h3><p><strong>1、安装</strong></p><pre><code>brew updatebrew install pyenv</code></pre><p><strong>2、配置</strong></p><ol><li><p>编辑配置文件</p><pre><code>vim ~/.zshrc    #使用zsh shellvim ~/.bash_profile #使用系统默认</code></pre><p> 在.zshrc或.bash_profile文件最后写入</p><pre><code># pyenvecho &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</code></pre></li><li><p>使配置生效</p><pre><code>source ~/.zshrc#或source ~/.bash_profile  </code></pre></li></ol><p><strong>3、安装zlib</strong></p><pre><code>brew install zlib#如果命令pyenv install 3.7.0报错需执行下面命令ln -s /usr/local/Cellar/zlib/1.2.11/lib/* /usr/local/libln -s /usr/local/Cellar/zlib/1.2.11/include/* /usr/local/include</code></pre><p><strong>4、使用</strong></p><ul><li><p>查看可安装版本</p><pre><code>pyenv install --list    #查看可安装版本</code></pre></li><li><p>安装指定版本</p><pre><code>pyenv install 3.7.0     #安装指定版本</code></pre></li><li><p>查看当前python版本</p><pre><code>pyenv version       #查看当前python版本</code></pre></li><li><p>查看已安装python版本</p><pre><code>pyenv versions      #查看已安装python版本</code></pre></li><li><p>设置python版本</p><pre><code>pyenv global 3.7.0  #对所有的Shell全局有效，版本号写入~/.pyenv/version文件pyenv local 3.7.0   #对当前目录有效，版本号写入当前目录下的.python-version文件pyenv shell 3.7.0   #对当前会话有效</code></pre></li><li><p>重置python版本设置</p><pre><code>pyenv shell --unsetpyenv local --unset</code></pre></li><li><p>卸载版本</p><pre><code>pyenv uninstall 3.7.0   </code></pre></li></ul><h3 id="二、pyenv-virtualenv安装和使用"><a href="#二、pyenv-virtualenv安装和使用" class="headerlink" title="二、pyenv-virtualenv安装和使用"></a>二、pyenv-virtualenv安装和使用</h3><p><strong>1、安装</strong></p><pre><code>brew updatebrew install pyenv-virtualenv</code></pre><p><strong>2、配置</strong></p><ol><li><p>编辑配置文件</p><pre><code>vim ~/.zshrc    #使用zsh shellvim ~/.bash_profile #使用系统默认</code></pre><p> 在.zshrc或.bash_profile文件最后写入</p><pre><code># pyenv-virtualenvif which pyenv-virtualenv-init &gt; /dev/null;  then eval &quot;$(pyenv virtualenv-init -)&quot;;fi      </code></pre></li><li><p>使配置生效</p><pre><code>source ~/.zshrc#或source ~/.bash_profile  </code></pre></li></ol><p><strong>3、使用</strong></p><ul><li><p>从当前版本创建虚拟环境</p><pre><code>pyenv virtualenv py370</code></pre></li><li><p>指定版本创建虚拟环境</p><pre><code>pyenv virtualenv 3.7.0 py370</code></pre></li><li><p>查看已创建的虚拟环境</p><pre><code>pyenv versions</code></pre></li><li><p>激活和停用虚拟环境</p><pre><code>#手动激活pyenv activate py370pyenv deactivate#自动激活，进入目录自动激活pyenv local py370</code></pre></li><li><p>删除现有虚拟环境</p><pre><code>pyenv uninstall py370</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、pyenv安装和使用&quot;&gt;&lt;a href=&quot;#一、pyenv安装和使用&quot; class=&quot;headerlink&quot; title=&quot;一、pyenv安装和使用&quot;&gt;&lt;/a&gt;一、pyenv安装和使用&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、安装&lt;/strong&gt;&lt;/p&gt;
&lt;pre
      
    
    </summary>
    
      <category term="Python" scheme="https://blog.wangyuehan.net/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python多版本管理virtualenv、virtualenvwrapper</title>
    <link href="https://blog.wangyuehan.net/2018/10/29/virtualenv-virtualenvwrapper/"/>
    <id>https://blog.wangyuehan.net/2018/10/29/virtualenv-virtualenvwrapper/</id>
    <published>2018-10-29T03:43:57.000Z</published>
    <updated>2019-02-14T05:46:00.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、virtualenv安装和使用"><a href="#一、virtualenv安装和使用" class="headerlink" title="一、virtualenv安装和使用"></a>一、virtualenv安装和使用</h3><p><strong>1、安装</strong></p><pre><code>pip install virtualenv</code></pre><p><strong>2、创建虚拟环境</strong></p><pre><code>virtualenv --no-site-packages -p /usr/local/bin/python3 venv3    --no-site-packages不复制系统环境中已安装的第三方包    -p /usr/local/bin/python3指定新建python解释器程序的路径</code></pre><p><strong>3、激活venv3虚拟环境</strong></p><pre><code>source venv3/bin/activate</code></pre><p><strong>4、退出venv3虚拟环境</strong></p><pre><code>source venv3/bin/deactivate</code></pre><p>Linux环境（与Windows区别：目录bin变成Scripts）</p><h3 id="二、virtualenvwrapper安装和使用"><a href="#二、virtualenvwrapper安装和使用" class="headerlink" title="二、virtualenvwrapper安装和使用"></a>二、virtualenvwrapper安装和使用</h3><p>因为virtualenv不便于虚拟环境集中管理，可以使用virtualenvwrapper提供统一的命令来管理虚拟环境</p><p><strong>1、安装</strong></p><pre><code>pip install virtualenvwrapperpip install virtualenvwrapper-win       #Windows使用该命令</code></pre><p><strong>2、配置</strong></p><ol><li><p>编辑配置文件</p><pre><code>vim ~/.zshrc    #使用zsh shellvim ~/.bash_profile #使用系统默认</code></pre><p> 在.zshrc或.bash_profile文件最后写入</p><pre><code># virtualenvwrapperecho &apos;export WORKON_HOME=~/Venvs&apos; &gt;&gt; ~/.zshrc #指定虚拟环境目录存放位置echo &apos;source /usr/local/bin/virtualenvwrapper.sh&apos; &gt;&gt; ~/.zshrc</code></pre></li><li><p>使配置生效</p><pre><code>source ~/.zshrc#或source ~/.bash_profile  </code></pre></li></ol><p><strong>3、使用</strong></p><ul><li><p>创建虚拟环境</p><pre><code>mkvirtualenv venv</code></pre></li><li><p>查看当前虚拟目录</p><pre><code>workon</code></pre></li><li><p>切换虚拟目录</p><pre><code>workon py3</code></pre></li><li><p>退出虚拟环境</p><pre><code>deactivate</code></pre></li><li><p>删除虚拟环境</p><pre><code>rmvirtualenv venv</code></pre></li></ul><h3 id="三、问题"><a href="#三、问题" class="headerlink" title="三、问题"></a>三、问题</h3><h4 id="1、Mac下安装virtualenvwrapper时报错"><a href="#1、Mac下安装virtualenvwrapper时报错" class="headerlink" title="1、Mac下安装virtualenvwrapper时报错"></a>1、Mac下安装virtualenvwrapper时报错</h4><pre><code>Cannot uninstall &apos;six&apos;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</code></pre><p>先升级six，再安装virtualenvwrapper</p><pre><code>sudo python -m pip install --upgrade six #正常升级命令执行报错，需使用下面命令sudo python -m pip install --upgrade --ignore-installed six</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、virtualenv安装和使用&quot;&gt;&lt;a href=&quot;#一、virtualenv安装和使用&quot; class=&quot;headerlink&quot; title=&quot;一、virtualenv安装和使用&quot;&gt;&lt;/a&gt;一、virtualenv安装和使用&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、
      
    
    </summary>
    
      <category term="Python" scheme="https://blog.wangyuehan.net/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo使用-添加分类和标签</title>
    <link href="https://blog.wangyuehan.net/2018/10/21/hexo-categories-tags/"/>
    <id>https://blog.wangyuehan.net/2018/10/21/hexo-categories-tags/</id>
    <published>2018-10-21T06:08:41.000Z</published>
    <updated>2019-02-14T05:41:54.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><p>1、创建分类显示页</p><pre><code>hexo new page categories  #创建了source/categories/index.md文件    </code></pre><p>index.md文件中添加内容</p><pre><code>type: &quot;categories&quot;</code></pre><p>2、创建文章页</p><pre><code>hexo new title pagename  #创建了source/_posts/pagename.md文件</code></pre><p>pagename.md文件中添加内容</p><pre><code>categories:     - Linux</code></pre><h3 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h3><p>1、创建标签显示页</p><pre><code>hexo new page tags  #创建了source/tags/index.md文件</code></pre><p>index.md文件中添加内容</p><pre><code>type: &quot;tags&quot;</code></pre><p>2、创建文章页</p><pre><code>hexo new title pagename #创建了source/_posts/pagename.md文件</code></pre><p>pagename.md文件中添加内容</p><pre><code>tags:     - 新页面</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;添加分类&quot;&gt;&lt;a href=&quot;#添加分类&quot; class=&quot;headerlink&quot; title=&quot;添加分类&quot;&gt;&lt;/a&gt;添加分类&lt;/h3&gt;&lt;p&gt;1、创建分类显示页&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo new page categories  
#创建了source
      
    
    </summary>
    
      <category term="Hexo" scheme="https://blog.wangyuehan.net/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos7 firewall配置</title>
    <link href="https://blog.wangyuehan.net/2018/10/21/centos-firewall/"/>
    <id>https://blog.wangyuehan.net/2018/10/21/centos-firewall/</id>
    <published>2018-10-21T05:52:00.000Z</published>
    <updated>2019-02-14T05:53:59.240Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7中默认使用的防火墙是firewall，下面是一些常用的命令</p><h3 id="firewall服务管理"><a href="#firewall服务管理" class="headerlink" title="firewall服务管理"></a>firewall服务管理</h3><pre><code>#开启服务 systemctl start firewalld.service#关闭防火墙systemctl stop firewalld.service#开机自动启动systemctl enable firewalld.service#关闭开机制动启动systemctl disable firewalld.service#查看状态systemctl status firewalld</code></pre><h3 id="firewall-cmd配置命令"><a href="#firewall-cmd配置命令" class="headerlink" title="firewall-cmd配置命令"></a>firewall-cmd配置命令</h3><pre><code>#查看状态firewall-cmd --state    //running 表示运行#获取活动的区域firewall-cmd --get-active-zones#修改配置文件后 使用命令重新加载firewall-cmd --reload#启用某个服务firewall-cmd --zone=public --add-service=httpsfirewall-cmd --permanent --zone=public --add-service=https#开启某个端口firewall-cmd --permanent --zone=public --add-port=8080-8081/tcpfirewall-cmd  --zone=public --add-port=8080-8081/tcp#查看开启的端口和服务firewall-cmd --permanent --zone=public --list-servicesfirewall-cmd --permanent --zone=public --list-ports</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Centos7中默认使用的防火墙是firewall，下面是一些常用的命令&lt;/p&gt;
&lt;h3 id=&quot;firewall服务管理&quot;&gt;&lt;a href=&quot;#firewall服务管理&quot; class=&quot;headerlink&quot; title=&quot;firewall服务管理&quot;&gt;&lt;/a&gt;firewa
      
    
    </summary>
    
      <category term="Linux" scheme="https://blog.wangyuehan.net/categories/Linux/"/>
    
    
      <category term="command" scheme="https://blog.wangyuehan.net/tags/command/"/>
    
  </entry>
  
</feed>
